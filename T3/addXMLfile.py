#! /usr/bin/env python
# -*- coding: utf-8 -*-
#***************************************************************************
#* @Project: add XML files for SFrame
#* @author Izaak Neutelings <iwn_@uzh.ch> - UZH
#***************************************************************************

usage = """
   ls -d xmls/*.xml > xmls.txt
   ./addXMLfile.py xmls.txt -o xmls
"""

import os
import sys
import re
import time
import optparse
import thread
import subprocess
import math

# parse the command line
parser=optparse.OptionParser(usage="%prog SAMPLELISTFILE") #epilog
parser.add_option("-v", "--verbose", action="store_true",
                dest="verbose", default=False,
                help="Verbose output [default = %default]")
parser.add_option("-m", "--maxFiles", action="store",
                dest="maxFiles", default="500",
                help="Maximum number of files [default = %default]")
parser.add_option("-o", "--outDir", action="store",
                dest="outDir", default="",
                help="Output directory for merged xml file [default = %default]")
parser.add_option("-n", "--name", action="store",
                dest="outFileName", default="merge.xml",
                help="Output name for merged xml file [default = %default]")
parser.add_option("-f", "--force", action="store_true",
                dest="forceOverwrite", default=False,
                help="Overwrite existing output files")
(options, args) = parser.parse_args()
if len(args)<1:
  parser.print_help()
  print usage
  parser.error("No input given. Please provide a file with a list of xml files.")
  exit(0)

print
xmlListName    = args[0]
verbose        = options.verbose
outDir         = options.outDir
outFileName    = options.outFileName
forceOverwrite = options.forceOverwrite
if ".xml" != outFileName[-4:] and '.' not in outFileName:
  outFileName+=".xml"
if "/" in outFileName:
  path         = '/'.join(outFileName.split('/')[:-1])
  outFileName  = outFileName.split('/')[-1]
  if outDir: outDir = "%s/%s"%(outDir.rstrip('/'),path.lstrip('/'))
  else:      outDir = path
  


def main():
  
  global outFileName
  nRootFiles = 0
  nEvents    = 0
  
  # INPUT xml files
  xmlFileNames = [ ]
  if ".xml" == xmlListName[-4:].lower():
    for xmlFileName in args:
      if ".xml" == xmlListName[-4:].lower():
        xmlFileNames.append(xmlFileName)
  else:
    with open(xmlListName,'r') as xmlList:
      xmlFileNames = [l for l in xmlList if not (l.startswith("#") or l.isspace())]
  nXmlFiles = len(xmlFileNames)
  
  # OUTDIR
  if outDir:
    if not os.path.exists(outDir):
      print "  Creating output directory %s"%(outDir)
      os.makedirs(outDir)
    outFileName = "%s/%s"%(outDir.rstrip('/'),outFileName)
  
  # OVERWRITE ?
  if os.path.exists(outFileName):
    if forceOverwrite:
      print "  Warning! \"%s\" already exists! Overwriting..."%(outFileName)
    else:
      print "  Error! \"%s\" already exists! Use the -f flag if you want to overwrite this file.\n"%(outFileName)
      exit(1)
  
  print "  Adding %d XML files to \"%s\"" % (len(xmlFileNames),outFileName)
  
  # WRITE output file
  with open(outFileName,'w') as outFile:
    
    hasEventsLine = False
    outFile.write("<!-- File generated by %s on %s -->\n\n"%(__file__,time.strftime("%c")))
    
    for xmlFileName in xmlFileNames:
      
      if outFileName == xmlFileName:
        print "  Warning! Output file \"%s\" is in the list of xml files! Omitting..."%(outFileName)
        continue
      
      # READ input xml file
      with open(xmlFileName,'r') as xmlFile:
        for line in xmlFile:
          
          # ROOT FILES
          rootFileNames = re.findall("<In FileName=.*\/>",line)
          if rootFileNames:
            outFile.write(line)
            nRootFiles += 1
          
          # COUNT EVENTS
          if "Total number of events processed" in line:
            events = re.findall("<!--.*Total number of events processed[^0-9]*(\d+\.?\d*).*-->",line)
            if events:
              hasEventsLine = True
              for n in events:
                nEvents += float(n)
            else:
              print "Warning! Problem with formatting in line \"%s\""%(line)
    
    outFile.write('\n')
    if hasEventsLine: outFile.write("<!-- Total number of events processed: %d -->"%(nEvents))  
    print "  Done! Added %s root files with in total %d events." % (nRootFiles,nEvents)
    


if __name__ == "__main__":
  main()
  print


